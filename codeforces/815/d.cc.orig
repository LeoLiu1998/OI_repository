//This sourcecode is under GPLv3
//http://yeguanghao.xyz
#include <bits/stdc++.h>
#define rep(name,start,end,step) for(int name=start;name<=end;name+=step)
using namespace std;
#define Pn(x) printf("%d\n",x)
#define Ps(x) printf("%d ",x)
#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define PROB
inline void R(int &x)
{
	x=0;
	int f=1;
	char ch=getchar();
	while(ch<'0'||ch>'9') {
		if(ch=='-') {
			f=-1;
		}
		ch=getchar();
	}
	while(ch>='0'&&ch<='9') {
		x=x*10+ch-'0';
		ch=getchar();
	}
	x*=f;
}
void Redirect()
{
	freopen(PROB".in","r",stdin);
#ifndef YGHDEBUG
	freopen(PROB".out","w",stdout);
#endif
}
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
/*int n,p,q,r;
typedef pair<pii,int> Card;
bool cmp(Card &a, Card &b) {
	return a.se<b.se;
}
const int maxn=500050;
Card card[maxn];
int cnt=0;
ll ans=0;
struct Seg{
	int l,r,mi,ma;
	ll sum,lazyv;
	Seg(int _l=0,int _r=0,int _mi=INT_MAX,int _ma=0,ll _sum=0,ll _lazyv=0): l(_l),r(_r),mi(_mi),ma(_ma),sum(_sum),lazyv(_lazyv) { }
	Seg  operator + (const Seg &a) const {
		Seg ret(l,a.r,min(mi,a.mi),max(ma,a.ma),sum+a.sum);
		return ret;
	}
};
Seg seg[4*maxn];
void Build(int pos,int l,int r) {
	if(l==r) {
		seg[pos].l=l;
		seg[pos].r=r;
		return ;
	}
	Build(pos<<1,l,(l+r)>>1);
	Build(pos<<1|1,((l+r)>>1)+1,r);
	seg[pos]=seg[pos<<1]+seg[pos<<1|1];
}

inline Seg Set(int l,int r,int v) {
	Seg ret(l,r,v,v,(ll)(r-l+1)*v,(ll)v);
	return ret;
}

void Pushdown(int pos) {
	int v=seg[pos].lazyv;
	seg[pos].lazyv=0;
	seg[pos<<1]=Set(seg[pos<<1].l,seg[pos<<1].r,v);
	seg[pos<<1|1]=Set(seg[pos<<1|1].l,seg[pos<<1|1].r,v);
}

void Update(int pos,int l,int r,int v) {
	if((seg[pos].l!=seg[pos].r)&&(seg[pos].lazyv)) {
		Pushdown(pos);
	}
	if(seg[pos].mi>=v) return;
	if(seg[pos].l==l&&seg[pos].r==r&&(seg[pos].ma<=v)) {
		seg[pos]=Set(seg[pos].l,seg[pos].r,v);
		return ;
	}
	int mid=(seg[pos].l+seg[pos].r)>>1;
	if(r<=mid) {
		Update(pos<<1,l,r,v);
	} else if(l>mid) {
		Update(pos<<1|1,l,r,v);
	} else {
		Update(pos<<1,l,mid,v);
		Update(pos<<1|1,mid+1,r,v);
	}
	seg[pos]=seg[pos<<1]+seg[pos<<1|1];
}
int Find(int pos,int v) {
	//if((v<seg[pos].mi)||(v>seg[pos].ma)) return 0;
	if(seg[pos].l==seg[pos].r) {
		return seg[pos].l;
	}
	if((seg[pos].l!=seg[pos].r)&&(seg[pos].lazyv)) {
		Pushdown(pos);
	}
	if(seg[pos<<1].ma<v) {
		return Find(pos<<1,v);
	} else {
		return Find(pos<<1|1,v);
	}
}
ll rg=0;
void Update(pii x) {
	rg=Find(1,x.se);
	Update(1,1,rg,x.se);
}

ll Query(int pos,int l,int r) {
	if((seg[pos].l!=seg[pos].r)&&(seg[pos].lazyv)) {
		Pushdown(pos);
	}
	if(seg[pos].l==l&&seg[pos].r==r) {
		return seg[pos].sum;
	}
	int mid=(seg[pos].l+seg[pos].r)>>1;
	if(r<=mid) {
		return Query(pos<<1,l,r);
	} else if(l>mid) {
		return Query(pos<<1|1,l,r);
	} else {
		return Query(pos<<1,l,mid)+Query(pos<<1|1,mid+1,r);
	}
}
int mx,my;
int prea[maxn];
int preb[maxn];
int main() {
	R(n); R(p); R(q); R(r);
	for(int i=1;i<=n;++i) {
		R(card[i].fi.fi); R(card[i].fi.se); R(card[i].se);
	}
	sort(card+1,card+n+1,cmp);
	Build(1,1,p);
	for(int i=1;i<=n;++i) {
		prea[i]=max(prea[i-1],card[i].fi.fi);
		preb[i]=max(preb[i-1],card[i].fi.se);
	}
	for(int i=r;i;--i) {
		while(card[cnt+1].se==i) {
			cnt++;
			Update(card[cnt].fi);
			mx=max(mx,card[cnt].fi.fi);
			my=max(my,card[cnt].fi.se);
		}
		ll delta=(rg-prea[cnt])*q-Query(1,prea[cnt]+1,rg)+(p-rg)*(q-preb[cnt]);//(ll)p*q+Query(1,1,p)-(ll)mx*q-(ll)my*p;
		ans+=delta;
		cerr<<i<<" "<<delta<<endl;
		//Query();
	}
	cout<<ans<<endl;
}
*/

const int N=500005,M=1311000;
typedef long long LL;
int n,p,q,r,Ma[N],Mb[N],Tag[M],Mx[M],tmp;
LL ans,sum[M],s;
struct Data {
	int a,b,c;
} A[N];

bool operator < (const Data &a,const Data &b)
{
	return a.c<b.c;
}

void Ins(int l,int r,int a,int b,int v,int x)
{
	if (l==a && r==b) {
		Tag[x]=Mx[x]=v;
		sum[x]=(LL)(r-l+1)*v;
		return;
	}
	int mid=l+r>>1;
	if (Tag[x]>0) {
		Tag[x<<1]=Tag[x<<1|1]=Mx[x<<1]=Mx[x<<1|1]=Tag[x];
		sum[x<<1]=(LL)(mid-l+1)*Tag[x];
		sum[x<<1|1]=(LL)(r-mid)*Tag[x];
		Tag[x]=0;
	}
	if (b<=mid) {
		Ins(l,mid,a,b,v,x<<1);
	} else if (a>mid) {
		Ins(mid+1,r,a,b,v,x<<1|1);
	} else {
		Ins(l,mid,a,mid,v,x<<1);
		Ins(mid+1,r,mid+1,b,v,x<<1|1);
	}
	sum[x]=sum[x<<1]+sum[x<<1|1];
	Mx[x]=max(Mx[x<<1],Mx[x<<1|1]);
}

void Get(int l,int r,int g,int x)
{
	if (l==r) {
		tmp=l;
		return;
	}
	int mid=l+r>>1;
	if (Tag[x]>0) {
		Tag[x<<1]=Tag[x<<1|1]=Mx[x<<1]=Mx[x<<1|1]=Tag[x];
		sum[x<<1]=(LL)(mid-l+1)*Tag[x];
		sum[x<<1|1]=(LL)(r-mid)*Tag[x];
		Tag[x]=0;
	}
	if (Mx[x<<1|1]<g) {
		Get(l,mid,g,x<<1);
	} else {
		Get(mid+1,r,g,x<<1|1);
	}
}

void getsum(int l,int r,int a,int b,int x)
{
	if (l==a && r==b) {
		s+=sum[x];
		return;
	}
	int mid=l+r>>1;
	if (Tag[x]>0) {
		Tag[x<<1]=Tag[x<<1|1]=Mx[x<<1]=Mx[x<<1|1]=Tag[x];
		sum[x<<1]=(LL)(mid-l+1)*Tag[x];
		sum[x<<1|1]=(LL)(r-mid)*Tag[x];
		Tag[x]=0;
	}
	if (b<=mid) {
		getsum(l,mid,a,b,x<<1);
	} else if (a>mid) {
		getsum(mid+1,r,a,b,x<<1|1);
	} else {
		getsum(l,mid,a,mid,x<<1);
		getsum(mid+1,r,mid+1,b,x<<1|1);
	}
}

int main()
{
	R(n);
	R(p);
	R(q);
	R(r);
	for (int i=1; i<=n; i++) {
		R(A[i].a);
		R(A[i].b);
		R(A[i].c);
	}
	sort(A+1,A+n+1);
	for (int i=n; i; i--) {
		Ma[i]=max(Ma[i+1],A[i].a);
		Mb[i]=max(Mb[i+1],A[i].b);
	}
	Ins(0,p,0,0,q+1,1);
	for (int i=1,j=1; i<=r; i++) {
		for (; j<=n && A[j].c<i; j++) {
			Get(0,p,A[j].b,1);
			if (tmp>=A[j].a) {
				continue;
			}
			Ins(0,p,tmp+1,A[j].a,A[j].b,1);
		}
		Get(0,p,Mb[j]+1,1);
		tmp=max(tmp,Ma[j]);
		s=0;
		if (tmp>Ma[j]) {
			getsum(0,p,Ma[j]+1,tmp,1);
		}
		ans+=(LL)(tmp-Ma[j])*q-s+(LL)(p-tmp)*(q-Mb[j]);
	}
	printf("%I64d\n",ans);
	return 0;
}
